
FastUPDI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103a  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de0  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045f  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00002598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a5  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000088  00000000  00000000  00002ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002d31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	5b c0       	rjmp	.+182    	; 0x11c <__vector_25>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	66 c0       	rjmp	.+204    	; 0x1d4 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
#include "SerialInterf.h"
#include "UPDI.h"

int main(void)
{
	Serial_init(250000);
 10a:	60 e9       	ldi	r22, 0x90	; 144
 10c:	70 ed       	ldi	r23, 0xD0	; 208
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	1e d0       	rcall	.+60     	; 0x150 <_Z11Serial_initm>
	CurrentState = STAT_UNCONNECTED;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x10>

0000011c <__vector_25>:
	{
	}
}

ISR(SERIAL_UART_RXINT_VECTOR)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	switch(CurrentState)
 12a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	41 f4       	brne	.+16     	; 0x142 <__vector_25+0x26>
	{
		case STAT_UNCONNECTED:
		{
			Serial_Send(Serial_received);
 132:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

void Serial_init(uint32_t baudrate);

inline void Serial_Send(uint8_t data)
{
	while (!(SERIAL_UART.UCSRA & BM(UDRE0))) {} //Wait until previous transmission finishes
 136:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 13a:	85 ff       	sbrs	r24, 5
 13c:	fc cf       	rjmp	.-8      	; 0x136 <__vector_25+0x1a>

	SERIAL_UART.UDR = data;
 13e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
		}
		break;
	}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <_Z11Serial_initm>:



void Serial_init(uint32_t baudrate)
{
	uint16_t baud_setting = (F_CPU / (8*baudrate)) -1;
 150:	dc 01       	movw	r26, r24
 152:	cb 01       	movw	r24, r22
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	aa 1f       	adc	r26, r26
 15a:	bb 1f       	adc	r27, r27
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	aa 1f       	adc	r26, r26
 162:	bb 1f       	adc	r27, r27
 164:	9c 01       	movw	r18, r24
 166:	ad 01       	movw	r20, r26
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	44 1f       	adc	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	74 e2       	ldi	r23, 0x24	; 36
 174:	84 ef       	ldi	r24, 0xF4	; 244
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0b d0       	rcall	.+22     	; 0x190 <__udivmodsi4>
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	31 09       	sbc	r19, r1
	SERIAL_UART.UBRR = baud_setting;
 17e:	e0 ec       	ldi	r30, 0xC0	; 192
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	35 83       	std	Z+5, r19	; 0x05
 184:	24 83       	std	Z+4, r18	; 0x04
	SERIAL_UART.UCSRA = BM(U2X0); //Set speed to 2X
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 83       	st	Z, r24
	SERIAL_UART.UCSRB = BM(RXEN0) | BM(TXEN0) | BM(RXCIE0); //Enable Tx & Rx & Interrupt@Rx
 18a:	88 e9       	ldi	r24, 0x98	; 152
 18c:	81 83       	std	Z+1, r24	; 0x01
 18e:	08 95       	ret

00000190 <__udivmodsi4>:
 190:	a1 e2       	ldi	r26, 0x21	; 33
 192:	1a 2e       	mov	r1, r26
 194:	aa 1b       	sub	r26, r26
 196:	bb 1b       	sub	r27, r27
 198:	fd 01       	movw	r30, r26
 19a:	0d c0       	rjmp	.+26     	; 0x1b6 <__udivmodsi4_ep>

0000019c <__udivmodsi4_loop>:
 19c:	aa 1f       	adc	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	ee 1f       	adc	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	a2 17       	cp	r26, r18
 1a6:	b3 07       	cpc	r27, r19
 1a8:	e4 07       	cpc	r30, r20
 1aa:	f5 07       	cpc	r31, r21
 1ac:	20 f0       	brcs	.+8      	; 0x1b6 <__udivmodsi4_ep>
 1ae:	a2 1b       	sub	r26, r18
 1b0:	b3 0b       	sbc	r27, r19
 1b2:	e4 0b       	sbc	r30, r20
 1b4:	f5 0b       	sbc	r31, r21

000001b6 <__udivmodsi4_ep>:
 1b6:	66 1f       	adc	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	88 1f       	adc	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	1a 94       	dec	r1
 1c0:	69 f7       	brne	.-38     	; 0x19c <__udivmodsi4_loop>
 1c2:	60 95       	com	r22
 1c4:	70 95       	com	r23
 1c6:	80 95       	com	r24
 1c8:	90 95       	com	r25
 1ca:	9b 01       	movw	r18, r22
 1cc:	ac 01       	movw	r20, r24
 1ce:	bd 01       	movw	r22, r26
 1d0:	cf 01       	movw	r24, r30
 1d2:	08 95       	ret

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
